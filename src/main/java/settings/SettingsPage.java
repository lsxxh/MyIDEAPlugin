package settings;

import com.github.lsxxh.myideaplugin.services.MyProjectService;
import com.github.lsxxh.myideaplugin.settings.PreferenceVariant;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Arrays;
import java.util.Collection;
import java.util.Objects;


/**
 * 用控件前(or NPR)：
 * 1.在设置中(GUI Designer)设置根据 Form界面自动生成Java源码(选Java Source Code);
 * 2.在 Gradle 的编译选项中设置编译器是IDEA自带的编译器(第一个Gradle(build and run using)改为Intellij IDEA;
 * 3.点锤子Build Project (Ctrl F9)可能会下载部分依赖,完毕后在.form绑定的实体类新增了代码$xx...
 * 生成的实体类与.form一同放在java目录下
 * or java.lang.ClassNotFoundException: com.github.lsxxh.myideaplugin.settings.SettingsPage PluginClassLoader(...
 */
public class SettingsPage {
    private JLabel scale;
    private JLabel presetDensityScaleLabel;
    private JPanel rootPanel;
    private JComboBox scaleJComboBox;
    //private JComboBox<String> scaleJComboBox;

    private final String[] optionJCombo = new String[]{
            "1.0    Medium Density(mdpi     ~160)   1x",
            "2/3    High Density(hdpi       ~240)   1.5x",
            "1/2    X-High Density(xhdpi    ~320)   2x",
            "4/9    360 DPI Density(-       ~360)   -",
            "1/3    XX-High Density(xxhdpi  ~480)   3x",
            "1/4    XXX-High Density(xxxhdpi ~640)  4x"
    };

    //private final float[] optionScale = new float[]{
    //        1.0f, 0.66f, 0.5f, 0.44f, 0.33f, 0.25f
    //};
    //要在#indexOfArray 中传给泛型接收，基本类型不行,如:float[]->Float[]
    private final Float[] optionScale = new Float[]{
                1.0f, 0.66f, 0.5f, 0.44f, 0.33f, 0.25f
        };

    public JLabel getScale() {
        return scale;
    }

    public JLabel getPresetDensityScale() {
        return presetDensityScaleLabel;
    }

    public JPanel getRootPanel() {
        presetConfig();
        return rootPanel;
    }

    private void presetConfig() {
        //PreferenceVariant.INSTANCE.setPresetScale(0.5F);
        //scaleJComboBox = new JComboBox(optionJCombo); //Assignment to UI-bound field will overwrite field generated by UI Designer.Please use 'com.intellij.openapi.ui.ComboBox' instead
        //scaleJComboBox = new ComboBox<>();
        Arrays.stream(optionJCombo).forEach((e)-> scaleJComboBox.addItem(e)); //OK
        //for (String s : optionJCombo) {
        //    scaleJComboBox.addItem(s);
        //}
        MyProjectService.getLogger().warn("yyz, succeed to addItem");
        //scaleJComboBox.setSelectedIndex(4);
        MyProjectService.getLogger().warn("yyz, preset: " + PreferenceVariant.INSTANCE.getPresetScale());
        scaleJComboBox.setSelectedIndex(indexOfArray(PreferenceVariant.INSTANCE.getPresetScale(), optionScale));
        //scaleJComboBox.addActionListener(new ActionListener() { //package java.awt.event;
        //    @Override
        //    public void actionPerformed(ActionEvent e) {
        //        //updateLabel((String) ((JCheckBox) e.getSource()).getSelectedItem()); //Deprecated
        //    }
        //});
        scaleJComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (ItemEvent.SELECTED == e.getStateChange()) {
                    PreferenceVariant.INSTANCE.setPresetScale(optionScale[scaleJComboBox.getSelectedIndex()]);
                    MyProjectService.getLogger().warn("yyz, idx: " + scaleJComboBox.getSelectedIndex() + "scale: " + PreferenceVariant.INSTANCE.getPresetScale());
                }
            }
        });
    }

    private <E> int indexOfArray(E e, E[] array) {
        for (int idx = 0; idx < array.length; idx++) {
            MyProjectService.getLogger().warn("yyz, test idx = " + idx + ", e = " + e + ", array[idx] = " + array[idx]);
            //if (array[idx] == e) { //浮点数比较不能用==,可用Objects.equals(o1,o2),0.5(f)!=0.5f<=计算机是二进制,表示浮点会丢精
            if (Objects.equals(array[idx], e)) {
                MyProjectService.getLogger().warn("yyz, test2 idx = " + idx + ", e = " + e + ", array[idx] = " + array[idx]);
                return idx;
            }
        }
        return -1;
    }

    //方法中throw了签名就要throws,本类中调用它的都要throws;对于重载的:overridden method does not throw 'java.lang.Exception'
    //故内部API中使用throw,通用工具类中不适合
    private <E> int indexOf(E e, E[] array) throws Exception {
        for (int idx = 0; idx < array.length; idx++) {
            //if (collection[idx] == e) { //Array type expected; found: 'java.util.Collection<E>'
            if (array[idx] == e) {
                return idx;
            }
        }
        throw new Exception("Element `" + e.toString() + "` NOT In ARRAY: " + Arrays.toString(array));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scale = new JLabel();
        scale.setText("Scale");
        panel1.add(scale, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        presetDensityScaleLabel = new JLabel();
        presetDensityScaleLabel.setText("Preset Density Scale");
        panel1.add(presetDensityScaleLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scaleJComboBox = new JComboBox();
        panel1.add(scaleJComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
